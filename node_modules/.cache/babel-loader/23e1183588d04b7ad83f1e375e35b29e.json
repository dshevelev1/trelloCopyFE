{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _utils = require(\"./utils\");\n\nvar utils = _interopRequireWildcard(_utils);\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/**\n * Simple module to localize the React interface using the same syntax\n * used in the ReactNativeLocalization module\n * (https://github.com/stefalda/ReactNativeLocalization)\n *\n * Originally developed by Stefano Falda (stefano.falda@gmail.com)\n *\n * It uses a call to the Navigator/Browser object to get the current interface language,\n * then display the correct language strings or the default language (the first\n * one if a match is not found).\n *\n * How to use:\n * Check the instructions at:\n * https://github.com/stefalda/localized-strings\n */\n\n\nvar placeholderReplaceRegex = /(\\{[\\d|\\w]+\\})/;\nvar placeholderReferenceRegex = /(\\$ref\\{[\\w|.]+\\})/;\n\nvar LocalizedStrings = function () {\n  /**\n   * Constructor used to provide the strings objects in various language and the optional callback to get\n   * the interface language\n   * @param {*} props - the strings object\n   * @param {Function} options.customLanguageInterface - the optional method to use to get the InterfaceLanguage\n   * @param {Boolean} options.pseudo - convert all strings to pseudo, helpful when implementing\n   * @param {Boolean} options.pseudoMultipleLanguages - add 40% to pseudo, helps with translations in the future\n   * @param {Boolean} options.logsEnabled - Enable/Disable console.log outputs (default=true)\n   */\n  function LocalizedStrings(props, options) {\n    _classCallCheck(this, LocalizedStrings); // Compatibility fix with previous version\n\n\n    if (typeof options === \"function\") {\n      /* eslint-disable no-param-reassign */\n      options = {\n        customLanguageInterface: options\n      };\n      /* eslint-enable */\n    }\n\n    this._opts = _extends({}, {\n      customLanguageInterface: utils.getInterfaceLanguage,\n      pseudo: false,\n      pseudoMultipleLanguages: false,\n      logsEnabled: true\n    }, options);\n    this._interfaceLanguage = this._opts.customLanguageInterface();\n    this._language = this._interfaceLanguage;\n    this.setContent(props);\n  }\n  /**\n   * Set the strings objects based on the parameter passed in the constructor\n   * @param {*} props\n   */\n\n\n  _createClass(LocalizedStrings, [{\n    key: \"setContent\",\n    value: function setContent(props) {\n      var _this = this;\n\n      var _Object$keys = Object.keys(props),\n          _Object$keys2 = _slicedToArray(_Object$keys, 1),\n          defaultLang = _Object$keys2[0];\n\n      this._defaultLanguage = defaultLang;\n      this._defaultLanguageFirstLevelKeys = []; // Store locally the passed strings\n\n      this._props = props;\n      utils.validateTranslationKeys(Object.keys(props[this._defaultLanguage])); // Store first level keys (for identifying missing translations)\n\n      Object.keys(this._props[this._defaultLanguage]).forEach(function (key) {\n        if (typeof _this._props[_this._defaultLanguage][key] === \"string\") {\n          _this._defaultLanguageFirstLevelKeys.push(key);\n        }\n      }); // Set language to its default value (the interface)\n\n      this.setLanguage(this._interfaceLanguage); // Developermode with pseudo\n\n      if (this._opts.pseudo) {\n        this._pseudoAllValues(this._props);\n      }\n    }\n    /**\n     * Replace all strings to pseudo value\n     * @param {Object} obj - Loopable object\n     */\n\n  }, {\n    key: \"_pseudoAllValues\",\n    value: function _pseudoAllValues(obj) {\n      var _this2 = this;\n\n      Object.keys(obj).forEach(function (property) {\n        if (_typeof(obj[property]) === \"object\") {\n          _this2._pseudoAllValues(obj[property]);\n        } else if (typeof obj[property] === \"string\") {\n          if (obj[property].indexOf(\"[\") === 0 && obj[property].lastIndexOf(\"]\") === obj[property].length - 1) {\n            // already psuedo fixed\n            return;\n          } // @TODO must be a way to get regex to find all replaceble strings except our replacement variables\n\n\n          var strArr = obj[property].split(\" \");\n\n          for (var i = 0; i < strArr.length; i += 1) {\n            if (strArr[i].match(placeholderReplaceRegex)) {// we want to keep this string, includes specials\n            } else if (strArr[i].match(placeholderReferenceRegex)) {// we want to keep this string, includes specials\n            } else {\n              var len = strArr[i].length;\n\n              if (_this2._opts.pseudoMultipleLanguages) {\n                len = parseInt(len * 1.4, 10); // add length with 40%\n              }\n\n              strArr[i] = utils.randomPseudo(len);\n            }\n          }\n\n          obj[property] = \"[\" + strArr.join(\" \") + \"]\"; // eslint-disable-line no-param-reassign\n        }\n      });\n    }\n    /**\n     * Can be used from ouside the class to force a particular language\n     * indipendently from the interface one\n     * @param {*} language\n     */\n\n  }, {\n    key: \"setLanguage\",\n    value: function setLanguage(language) {\n      var _this3 = this; // Check if exists a translation for the current language or if the default\n      // should be used\n\n\n      var bestLanguage = utils.getBestMatchingLanguage(language, this._props);\n      var defaultLanguage = Object.keys(this._props)[0];\n      this._language = bestLanguage; // Associate the language object to the this object\n\n      if (this._props[bestLanguage]) {\n        // delete default propery values to identify missing translations\n        for (var i = 0; i < this._defaultLanguageFirstLevelKeys.length; i += 1) {\n          delete this[this._defaultLanguageFirstLevelKeys[i]];\n        }\n\n        var localizedStrings = _extends({}, this._props[this._language]);\n\n        Object.keys(localizedStrings).forEach(function (key) {\n          _this3[key] = localizedStrings[key];\n        }); // Now add any string missing from the translation but existing in the default language\n\n        if (defaultLanguage !== this._language) {\n          localizedStrings = this._props[defaultLanguage];\n\n          this._fallbackValues(localizedStrings, this);\n        }\n      }\n    }\n    /**\n     * Load fallback values for missing translations\n     * @param {*} defaultStrings\n     * @param {*} strings\n     */\n\n  }, {\n    key: \"_fallbackValues\",\n    value: function _fallbackValues(defaultStrings, strings) {\n      var _this4 = this;\n\n      Object.keys(defaultStrings).forEach(function (key) {\n        if (Object.prototype.hasOwnProperty.call(defaultStrings, key) && !strings[key] && strings[key] !== \"\") {\n          strings[key] = defaultStrings[key]; // eslint-disable-line no-param-reassign\n\n          if (_this4._opts.logsEnabled) {\n            console.log(\"\\uD83D\\uDEA7 \\uD83D\\uDC77 key '\" + key + \"' not found in localizedStrings for language \" + _this4._language + \" \\uD83D\\uDEA7\");\n          }\n        } else if (typeof strings[key] !== \"string\") {\n          // It's an object\n          _this4._fallbackValues(defaultStrings[key], strings[key]);\n        }\n      });\n    }\n    /**\n     * The current language displayed (could differ from the interface language\n     * if it has been forced manually and a matching translation has been found)\n     */\n\n  }, {\n    key: \"getLanguage\",\n    value: function getLanguage() {\n      return this._language;\n    }\n    /**\n     * The current interface language (could differ from the language displayed)\n     */\n\n  }, {\n    key: \"getInterfaceLanguage\",\n    value: function getInterfaceLanguage() {\n      return this._interfaceLanguage;\n    }\n    /**\n     * Return an array containing the available languages passed as props in the constructor\n     */\n\n  }, {\n    key: \"getAvailableLanguages\",\n    value: function getAvailableLanguages() {\n      var _this5 = this;\n\n      if (!this._availableLanguages) {\n        this._availableLanguages = [];\n        Object.keys(this._props).forEach(function (key) {\n          _this5._availableLanguages.push(key);\n        });\n      }\n\n      return this._availableLanguages;\n    } // Format the passed string replacing the numbered or tokenized placeholders\n    // eg. 1: I'd like some {0} and {1}, or just {0}\n    // eg. 2: I'd like some {bread} and {butter}, or just {bread}\n    // eg. 3: I'd like some $ref{bread} and $ref{butter}, or just $ref{bread}\n    // Use example:\n    // eg. 1: strings.formatString(strings.question, strings.bread, strings.butter)\n    // eg. 2: strings.formatString(strings.question, { bread: strings.bread, butter: strings.butter })\n    // eg. 3: strings.formatString(strings.question)\n\n  }, {\n    key: \"formatString\",\n    value: function formatString(str) {\n      var _this6 = this;\n\n      for (var _len = arguments.length, valuesForPlaceholders = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        valuesForPlaceholders[_key - 1] = arguments[_key];\n      }\n\n      var input = str || \"\";\n\n      if (typeof input === \"string\") {\n        input = this.getString(str, null, true) || input;\n      }\n\n      var ref = input.split(placeholderReferenceRegex).filter(function (textPart) {\n        return !!textPart;\n      }).map(function (textPart) {\n        if (textPart.match(placeholderReferenceRegex)) {\n          var matchedKey = textPart.slice(5, -1);\n\n          var referenceValue = _this6.getString(matchedKey);\n\n          if (referenceValue) return referenceValue;\n\n          if (_this6._opts.logsEnabled) {\n            console.log(\"No Localization ref found for '\" + textPart + \"' in string '\" + str + \"'\");\n          } // lets print it another way so next replacer doesn't find it\n\n\n          return \"$ref(id:\" + matchedKey + \")\";\n        }\n\n        return textPart;\n      }).join(\"\");\n      return ref.split(placeholderReplaceRegex).filter(function (textPart) {\n        return !!textPart;\n      }).map(function (textPart) {\n        if (textPart.match(placeholderReplaceRegex)) {\n          var matchedKey = textPart.slice(1, -1);\n          var valueForPlaceholder = valuesForPlaceholders[matchedKey]; // If no value found, check if working with an object instead\n\n          if (valueForPlaceholder === undefined) {\n            var valueFromObjectPlaceholder = valuesForPlaceholders[0][matchedKey];\n\n            if (valueFromObjectPlaceholder !== undefined) {\n              valueForPlaceholder = valueFromObjectPlaceholder;\n            } else {\n              // If value still isn't found, then it must have been undefined/null\n              return valueForPlaceholder;\n            }\n          }\n\n          return valueForPlaceholder;\n        }\n\n        return textPart;\n      }).join(\"\");\n    } // Return a string with the passed key in a different language or defalt if not set\n    // We allow deep . notation for finding strings\n\n  }, {\n    key: \"getString\",\n    value: function getString(key, language) {\n      var omitWarning = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      try {\n        var current = this._props[language || this._language];\n        var paths = key.split(\".\");\n\n        for (var i = 0; i < paths.length; i += 1) {\n          if (current[paths[i]] === undefined) {\n            throw Error(paths[i]);\n          }\n\n          current = current[paths[i]];\n        }\n\n        return current;\n      } catch (ex) {\n        if (!omitWarning && this._opts.logsEnabled) {\n          console.log(\"No localization found for key '\" + key + \"' and language '\" + language + \"', failed on \" + ex.message);\n        }\n      }\n\n      return null;\n    }\n    /**\n     * The current props (locale object)\n     */\n\n  }, {\n    key: \"getContent\",\n    value: function getContent() {\n      return this._props;\n    }\n  }]);\n\n  return LocalizedStrings;\n}();\n\nexports.default = LocalizedStrings;","map":{"version":3,"names":["Object","defineProperty","exports","value","_typeof","Symbol","iterator","obj","constructor","prototype","_slicedToArray","sliceIterator","arr","i","_arr","_n","_d","_e","undefined","_i","_s","next","done","push","length","err","Array","isArray","TypeError","_extends","assign","target","arguments","source","key","hasOwnProperty","call","_createClass","defineProperties","props","descriptor","enumerable","configurable","writable","Constructor","protoProps","staticProps","_utils","require","utils","_interopRequireWildcard","__esModule","newObj","default","_classCallCheck","instance","placeholderReplaceRegex","placeholderReferenceRegex","LocalizedStrings","options","customLanguageInterface","_opts","getInterfaceLanguage","pseudo","pseudoMultipleLanguages","logsEnabled","_interfaceLanguage","_language","setContent","_this","_Object$keys","keys","_Object$keys2","defaultLang","_defaultLanguage","_defaultLanguageFirstLevelKeys","_props","validateTranslationKeys","forEach","setLanguage","_pseudoAllValues","_this2","property","indexOf","lastIndexOf","strArr","split","match","len","parseInt","randomPseudo","join","language","_this3","bestLanguage","getBestMatchingLanguage","defaultLanguage","localizedStrings","_fallbackValues","defaultStrings","strings","_this4","console","log","getLanguage","getAvailableLanguages","_this5","_availableLanguages","formatString","str","_this6","_len","valuesForPlaceholders","_key","input","getString","ref","filter","textPart","map","matchedKey","slice","referenceValue","valueForPlaceholder","valueFromObjectPlaceholder","omitWarning","current","paths","Error","ex","message","getContent"],"sources":["/home/ITRANSITION.CORP/d.shevelev/Desktop/testTaskITr/trelloCopyFE/node_modules/localized-strings/lib/LocalizedStrings.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _utils = require(\"./utils\");\n\nvar utils = _interopRequireWildcard(_utils);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Simple module to localize the React interface using the same syntax\n * used in the ReactNativeLocalization module\n * (https://github.com/stefalda/ReactNativeLocalization)\n *\n * Originally developed by Stefano Falda (stefano.falda@gmail.com)\n *\n * It uses a call to the Navigator/Browser object to get the current interface language,\n * then display the correct language strings or the default language (the first\n * one if a match is not found).\n *\n * How to use:\n * Check the instructions at:\n * https://github.com/stefalda/localized-strings\n */\n\nvar placeholderReplaceRegex = /(\\{[\\d|\\w]+\\})/;\nvar placeholderReferenceRegex = /(\\$ref\\{[\\w|.]+\\})/;\n\nvar LocalizedStrings = function () {\n  /**\n   * Constructor used to provide the strings objects in various language and the optional callback to get\n   * the interface language\n   * @param {*} props - the strings object\n   * @param {Function} options.customLanguageInterface - the optional method to use to get the InterfaceLanguage\n   * @param {Boolean} options.pseudo - convert all strings to pseudo, helpful when implementing\n   * @param {Boolean} options.pseudoMultipleLanguages - add 40% to pseudo, helps with translations in the future\n   * @param {Boolean} options.logsEnabled - Enable/Disable console.log outputs (default=true)\n   */\n  function LocalizedStrings(props, options) {\n    _classCallCheck(this, LocalizedStrings);\n\n    // Compatibility fix with previous version\n    if (typeof options === \"function\") {\n      /* eslint-disable no-param-reassign */\n      options = { customLanguageInterface: options };\n      /* eslint-enable */\n    }\n    this._opts = _extends({}, {\n      customLanguageInterface: utils.getInterfaceLanguage,\n      pseudo: false,\n      pseudoMultipleLanguages: false,\n      logsEnabled: true\n    }, options);\n    this._interfaceLanguage = this._opts.customLanguageInterface();\n    this._language = this._interfaceLanguage;\n    this.setContent(props);\n  }\n\n  /**\n   * Set the strings objects based on the parameter passed in the constructor\n   * @param {*} props\n   */\n\n\n  _createClass(LocalizedStrings, [{\n    key: \"setContent\",\n    value: function setContent(props) {\n      var _this = this;\n\n      var _Object$keys = Object.keys(props),\n          _Object$keys2 = _slicedToArray(_Object$keys, 1),\n          defaultLang = _Object$keys2[0];\n\n      this._defaultLanguage = defaultLang;\n      this._defaultLanguageFirstLevelKeys = [];\n      // Store locally the passed strings\n      this._props = props;\n      utils.validateTranslationKeys(Object.keys(props[this._defaultLanguage]));\n      // Store first level keys (for identifying missing translations)\n      Object.keys(this._props[this._defaultLanguage]).forEach(function (key) {\n        if (typeof _this._props[_this._defaultLanguage][key] === \"string\") {\n          _this._defaultLanguageFirstLevelKeys.push(key);\n        }\n      });\n      // Set language to its default value (the interface)\n      this.setLanguage(this._interfaceLanguage);\n      // Developermode with pseudo\n      if (this._opts.pseudo) {\n        this._pseudoAllValues(this._props);\n      }\n    }\n\n    /**\n     * Replace all strings to pseudo value\n     * @param {Object} obj - Loopable object\n     */\n\n  }, {\n    key: \"_pseudoAllValues\",\n    value: function _pseudoAllValues(obj) {\n      var _this2 = this;\n\n      Object.keys(obj).forEach(function (property) {\n        if (_typeof(obj[property]) === \"object\") {\n          _this2._pseudoAllValues(obj[property]);\n        } else if (typeof obj[property] === \"string\") {\n          if (obj[property].indexOf(\"[\") === 0 && obj[property].lastIndexOf(\"]\") === obj[property].length - 1) {\n            // already psuedo fixed\n            return;\n          }\n          // @TODO must be a way to get regex to find all replaceble strings except our replacement variables\n          var strArr = obj[property].split(\" \");\n          for (var i = 0; i < strArr.length; i += 1) {\n            if (strArr[i].match(placeholderReplaceRegex)) {\n              // we want to keep this string, includes specials\n            } else if (strArr[i].match(placeholderReferenceRegex)) {\n              // we want to keep this string, includes specials\n            } else {\n              var len = strArr[i].length;\n              if (_this2._opts.pseudoMultipleLanguages) {\n                len = parseInt(len * 1.4, 10); // add length with 40%\n              }\n              strArr[i] = utils.randomPseudo(len);\n            }\n          }\n          obj[property] = \"[\" + strArr.join(\" \") + \"]\"; // eslint-disable-line no-param-reassign\n        }\n      });\n    }\n\n    /**\n     * Can be used from ouside the class to force a particular language\n     * indipendently from the interface one\n     * @param {*} language\n     */\n\n  }, {\n    key: \"setLanguage\",\n    value: function setLanguage(language) {\n      var _this3 = this;\n\n      // Check if exists a translation for the current language or if the default\n      // should be used\n      var bestLanguage = utils.getBestMatchingLanguage(language, this._props);\n      var defaultLanguage = Object.keys(this._props)[0];\n      this._language = bestLanguage;\n      // Associate the language object to the this object\n      if (this._props[bestLanguage]) {\n        // delete default propery values to identify missing translations\n        for (var i = 0; i < this._defaultLanguageFirstLevelKeys.length; i += 1) {\n          delete this[this._defaultLanguageFirstLevelKeys[i]];\n        }\n        var localizedStrings = _extends({}, this._props[this._language]);\n        Object.keys(localizedStrings).forEach(function (key) {\n          _this3[key] = localizedStrings[key];\n        });\n        // Now add any string missing from the translation but existing in the default language\n        if (defaultLanguage !== this._language) {\n          localizedStrings = this._props[defaultLanguage];\n          this._fallbackValues(localizedStrings, this);\n        }\n      }\n    }\n\n    /**\n     * Load fallback values for missing translations\n     * @param {*} defaultStrings\n     * @param {*} strings\n     */\n\n  }, {\n    key: \"_fallbackValues\",\n    value: function _fallbackValues(defaultStrings, strings) {\n      var _this4 = this;\n\n      Object.keys(defaultStrings).forEach(function (key) {\n        if (Object.prototype.hasOwnProperty.call(defaultStrings, key) && !strings[key] && strings[key] !== \"\") {\n          strings[key] = defaultStrings[key]; // eslint-disable-line no-param-reassign\n          if (_this4._opts.logsEnabled) {\n            console.log(\"\\uD83D\\uDEA7 \\uD83D\\uDC77 key '\" + key + \"' not found in localizedStrings for language \" + _this4._language + \" \\uD83D\\uDEA7\");\n          }\n        } else if (typeof strings[key] !== \"string\") {\n          // It's an object\n          _this4._fallbackValues(defaultStrings[key], strings[key]);\n        }\n      });\n    }\n\n    /**\n     * The current language displayed (could differ from the interface language\n     * if it has been forced manually and a matching translation has been found)\n     */\n\n  }, {\n    key: \"getLanguage\",\n    value: function getLanguage() {\n      return this._language;\n    }\n\n    /**\n     * The current interface language (could differ from the language displayed)\n     */\n\n  }, {\n    key: \"getInterfaceLanguage\",\n    value: function getInterfaceLanguage() {\n      return this._interfaceLanguage;\n    }\n\n    /**\n     * Return an array containing the available languages passed as props in the constructor\n     */\n\n  }, {\n    key: \"getAvailableLanguages\",\n    value: function getAvailableLanguages() {\n      var _this5 = this;\n\n      if (!this._availableLanguages) {\n        this._availableLanguages = [];\n        Object.keys(this._props).forEach(function (key) {\n          _this5._availableLanguages.push(key);\n        });\n      }\n      return this._availableLanguages;\n    }\n\n    // Format the passed string replacing the numbered or tokenized placeholders\n    // eg. 1: I'd like some {0} and {1}, or just {0}\n    // eg. 2: I'd like some {bread} and {butter}, or just {bread}\n    // eg. 3: I'd like some $ref{bread} and $ref{butter}, or just $ref{bread}\n    // Use example:\n    // eg. 1: strings.formatString(strings.question, strings.bread, strings.butter)\n    // eg. 2: strings.formatString(strings.question, { bread: strings.bread, butter: strings.butter })\n    // eg. 3: strings.formatString(strings.question)\n\n  }, {\n    key: \"formatString\",\n    value: function formatString(str) {\n      var _this6 = this;\n\n      for (var _len = arguments.length, valuesForPlaceholders = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        valuesForPlaceholders[_key - 1] = arguments[_key];\n      }\n\n      var input = str || \"\";\n      if (typeof input === \"string\") {\n        input = this.getString(str, null, true) || input;\n      }\n      var ref = input.split(placeholderReferenceRegex).filter(function (textPart) {\n        return !!textPart;\n      }).map(function (textPart) {\n        if (textPart.match(placeholderReferenceRegex)) {\n          var matchedKey = textPart.slice(5, -1);\n          var referenceValue = _this6.getString(matchedKey);\n          if (referenceValue) return referenceValue;\n          if (_this6._opts.logsEnabled) {\n            console.log(\"No Localization ref found for '\" + textPart + \"' in string '\" + str + \"'\");\n          }\n          // lets print it another way so next replacer doesn't find it\n          return \"$ref(id:\" + matchedKey + \")\";\n        }\n        return textPart;\n      }).join(\"\");\n      return ref.split(placeholderReplaceRegex).filter(function (textPart) {\n        return !!textPart;\n      }).map(function (textPart) {\n        if (textPart.match(placeholderReplaceRegex)) {\n          var matchedKey = textPart.slice(1, -1);\n          var valueForPlaceholder = valuesForPlaceholders[matchedKey];\n          // If no value found, check if working with an object instead\n          if (valueForPlaceholder === undefined) {\n            var valueFromObjectPlaceholder = valuesForPlaceholders[0][matchedKey];\n            if (valueFromObjectPlaceholder !== undefined) {\n              valueForPlaceholder = valueFromObjectPlaceholder;\n            } else {\n              // If value still isn't found, then it must have been undefined/null\n              return valueForPlaceholder;\n            }\n          }\n\n          return valueForPlaceholder;\n        }\n        return textPart;\n      }).join(\"\");\n    }\n\n    // Return a string with the passed key in a different language or defalt if not set\n    // We allow deep . notation for finding strings\n\n  }, {\n    key: \"getString\",\n    value: function getString(key, language) {\n      var omitWarning = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      try {\n        var current = this._props[language || this._language];\n        var paths = key.split(\".\");\n        for (var i = 0; i < paths.length; i += 1) {\n          if (current[paths[i]] === undefined) {\n            throw Error(paths[i]);\n          }\n          current = current[paths[i]];\n        }\n        return current;\n      } catch (ex) {\n        if (!omitWarning && this._opts.logsEnabled) {\n          console.log(\"No localization found for key '\" + key + \"' and language '\" + language + \"', failed on \" + ex.message);\n        }\n      }\n      return null;\n    }\n\n    /**\n     * The current props (locale object)\n     */\n\n  }, {\n    key: \"getContent\",\n    value: function getContent() {\n      return this._props;\n    }\n  }]);\n\n  return LocalizedStrings;\n}();\n\nexports.default = LocalizedStrings;"],"mappings":"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"},"metadata":{},"sourceType":"script"}